{"version":3,"file":"static/js/892.1c1b15f3.chunk.js","mappings":"qMAEA,MAYaA,EAAmB,CAC9BC,EAAAA,KAAKC,KAAI,GAAAC,OAbM,wBAawB,uBAAsBC,MAAOC,EAAKC,EAAKC,KAC5E,MAAM,MAAEC,SAAgBH,EAAII,OAGtBC,EAAiC,CACrCF,QACAG,MAAO,oBAET,OAAOL,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAKC,GAAU,KCX7CG,EAAmC,CACvCC,GAAI,EACJC,KAAM,iBACNC,MAAO,IACPC,SACE,yMACFC,WAAY,GAGDC,EAA2B,CACtClB,EAAAA,KAAKmB,IAAI,GAADjB,OApBO,wBAoBK,6BAA4B,CAACE,EAAKC,EAAKC,KACzD,MAAM,UAAEc,GAAchB,EAAIiB,OAI1B,OAAID,EACKf,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAKI,IAE9BP,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAK,CAAEc,QAAS,sBAClD,KCTSC,EAA4B,CACvCvB,EAAAA,KAAKmB,IAAI,GAADjB,OArBO,wBAqBK,qCAAoC,CAACE,EAAKC,EAAKC,KACjE,MAAM,UAAEc,GAAchB,EAAIiB,OACpBG,EAbeJ,KACvB,MAAMK,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACpD,OAAOC,MAAMC,KAAK,CAAEC,OAAQN,IAAe,CAACO,EAAGC,KAAK,CAClDpB,GAAIoB,EAAQ,EACZnB,KAAK,UAADZ,OAAYgC,OAAOC,aAAa,GAAKF,IACzCG,SAAUV,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAC3CR,UAAWA,KACV,EAMeiB,CAAgBC,OAAOlB,IAEvC,OAAOf,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAKgB,GAAS,K,cCzBlD,MAYae,EAAsB,CACjCvC,EAAAA,KAAKC,KAAI,GAAAC,OAbM,wBAa2B,0BAAyB,CAACE,EAAKC,EAAKC,KAC5E,MAAM,MAAEC,EAAK,SAAEiC,GAAapC,EAAIqC,KAGhC,IAAKlC,IAAUiC,EACb,OAAOnC,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAK,CAAEc,QAAS,mBAIlD,MAAMb,EAAoC,CACxCF,QACAG,MAAO,6BAET,OAAOL,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAKC,GAAU,KC1B7CiC,EAAW,4BAGXC,EAAqBA,KACzB,MAAMC,EAAW,CACf,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEF,OAAOA,EAASlB,KAAKC,MAAMD,KAAKE,SAAWgB,EAASb,QAAQ,EAW9D,IAAIc,EAAWhB,MAAMC,KAAK,CAAEC,OAAQ,KAAM,CAACC,EAAGnB,KAAE,CAC9CA,GAAIA,EAAK,EACTiC,QAAS,CACPjC,GAAIA,EAAK,EACTC,KAAM6B,IACN5B,MAZKW,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoB,EAazCZ,SATK,+DAYF,MAAM+B,EAAuB,CAElC/C,EAAAA,KAAKC,KAAK,GAADC,OAAIwC,EAAQ,YAAW,CAACtC,EAAKC,EAAKC,KACzC,MAAM,UAAEc,GAAchB,EAAIqC,KACpBO,EAAU,CACdnC,GAAIgC,EAASd,OAAS,EACtBe,QAAS,CACPjC,GAAIO,EACJN,KAAK,WAADZ,OAAakB,GACjBL,MAAOW,KAAKC,MAAsB,IAAhBD,KAAKE,UACvBZ,SAAS,8BAADd,OAAgCkB,EAAS,UAIrD,OADAyB,EAASI,KAAKD,GACP3C,EAAIC,EAAIK,OAAO,KAAML,EAAIE,KAAK,CAAEK,GAAImC,EAAQnC,GAAIO,cAAa,IAItEpB,EAAAA,KAAKkD,OAAO,GAADhD,OAAIwC,EAAQ,oBAAmB,CAACtC,EAAKC,EAAKC,KACnD,MAAM,OAAE6C,GAAW/C,EAAIiB,OAEvB,OADAwB,EAAWA,EAASO,QAAQC,GAASA,EAAKxC,KAAOyB,OAAOa,KACjD9C,EAAIC,EAAIK,OAAO,KAAK,IAI7BX,EAAAA,KAAKmB,IAAI,GAADjB,OAAIwC,EAAQ,YAAW,CAACtC,EAAKC,EAAKC,KACxC,MAAMgD,EAAOhB,OAAOlC,EAAImD,IAAIC,aAAarC,IAAI,SAAW,KAClDsC,EAAOnB,OAAOlC,EAAImD,IAAIC,aAAarC,IAAI,SAAW,MAClDuC,EAAYtD,EAAImD,IAAIC,aAAarC,IAAI,SAAW,mBAEhDwC,EAAaL,EAAOG,EACpBG,EAAWD,EAAaF,EAWxBI,EARiB,IAAIhB,GAAUiB,MAAK,CAACC,EAAGC,KAC5C,MAAOC,EAAOC,GAASR,EAAUS,MAAM,KACvC,MAAc,gBAAVF,EACe,SAAVC,EAAmBF,EAAEnD,GAAKkD,EAAElD,GAAKkD,EAAElD,GAAKmD,EAAEnD,GAE5C,CAAC,IAG6BuD,MAAMT,EAAYC,GAEzD,OAAOvD,EACLC,EAAIK,OAAO,KACXL,EAAIE,KAAK,CACP6D,QAASR,EACTS,SAAU,CACRR,KAAM,CACJS,QAAQ,EACRC,UAAU,EACVC,OAAO,GAETC,WAAYpB,EACZqB,SAAUlB,EACVmB,OAAQjB,EACRkB,SAAS,EACTC,OAAO,GAETC,WAAYrD,KAAKsD,KAAKnC,EAASd,OAAS0B,GACxCwB,cAAepC,EAASd,OACxBmD,KAAMtB,GAAYf,EAASd,OAC3BoD,OAAQ7B,EACRG,KAAMA,EACN2B,iBAAkBvB,EAAgB9B,OAClCsD,MAAgB,IAAT/B,EACPmB,MAAkC,IAA3BZ,EAAgB9B,SAE1B,KClGQuD,GAASC,EAAAA,EAAAA,gBACjBC,EAAAA,MACAC,EAAAA,MACAvE,KACAK,KACAxB,KACAwC,KACAQ,E","sources":["api/mocks/login.mock.ts","api/mocks/productDetail.mock.ts","api/mocks/productOptions.mock.ts","api/mocks/register.mock.ts","api/mocks/wishlist.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000';\n\ntype LoginRequestBody = {\n  email: string;\n  password: string;\n};\n\ntype LoginSuccessResponse = {\n  email: string;\n  token: string;\n};\n\nexport const loginMockHandler = [\n  rest.post<LoginRequestBody>(`${BASE_URL}/api/members/login`, async (req, res, ctx) => {\n    const { email } = await req.json();\n\n    // 항상 성공 응답 반환\n    const response: LoginSuccessResponse = {\n      email,\n      token: 'mocked-jwt-token',\n    };\n    return res(ctx.status(200), ctx.json(response));\n  }),\n];\n","import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000';\n\ninterface ProductDetail {\n  id: number;\n  name: string;\n  price: number;\n  imageUrl: string;\n  categoryId: number;\n}\n\nconst mockProductDetail: ProductDetail = {\n  id: 1,\n  name: 'Sample Product',\n  price: 100,\n  imageUrl:\n    'https://i.namu.wiki/i/lTIwu3NCJk-m5VOdugukoiVGzyZAVauahUc2qnrOX-j8XFCA7PXv95cioeTRqrixnTUYDdfZnapP2Fo-jz3OBl5VYyd5SJpft-ZcMedgg4QmJGEkeol2W-do5U3mL6_vqQYTPAr7QBwp7VTts7kmfiYUgQ_Hosv7gwcBxnFagmo.webp',\n  categoryId: 1,\n};\n\nexport const productDetailMockHandler = [\n  rest.get(`${BASE_URL}/api/products/:productId`, (req, res, ctx) => {\n    const { productId } = req.params;\n\n    // 실제 환경에서는 여기서 productId를 사용하여 다양한 상품을 반환할 수 있습니다.\n    // 이 예제에서는 항상 같은 mockProductDetail을 반환합니다.\n    if (productId) {\n      return res(ctx.status(200), ctx.json(mockProductDetail));\n    } else {\n      return res(ctx.status(404), ctx.json({ message: 'Product not found' }));\n    }\n  }),\n];\n","import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000';\n\ninterface ProductOption {\n  id: number;\n  name: string;\n  quantity: number;\n  productId: number;\n}\n\n// 동적으로 옵션을 생성하는 함수\nconst generateOptions = (productId: number): ProductOption[] => {\n  const optionCount = Math.floor(Math.random() * 3) + 1; // 1에서 3개의 옵션 생성\n  return Array.from({ length: optionCount }, (_, index) => ({\n    id: index + 1,\n    name: `Option ${String.fromCharCode(65 + index)}`, // A, B, C...\n    quantity: Math.floor(Math.random() * 50) + 10, // 10에서 59 사이의 수량\n    productId: productId,\n  }));\n};\n\nexport const productOptionsMockHandler = [\n  rest.get(`${BASE_URL}/api/products/:productId/options`, (req, res, ctx) => {\n    const { productId } = req.params;\n    const options = generateOptions(Number(productId));\n\n    return res(ctx.status(200), ctx.json(options));\n  }),\n];\n","import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000';\n\ninterface RegisterRequestBody {\n  email: string;\n  password: string;\n}\n\ninterface RegisterSuccessResponse {\n  email: string;\n  token: string;\n}\n\nexport const registerMockHandler = [\n  rest.post<RegisterRequestBody>(`${BASE_URL}/api/members/register`, (req, res, ctx) => {\n    const { email, password } = req.body;\n\n    // Basic validation (add more robust validation as needed)\n    if (!email || !password) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    // Simulate successful registration\n    const response: RegisterSuccessResponse = {\n      email,\n      token: 'mocked-registration-token',\n    };\n    return res(ctx.status(201), ctx.json(response));\n  }),\n];\n","import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000/api';\n\n// 모의 데이터\nconst generateRandomName = (): string => {\n  const products = [\n    'Product A',\n    'Product B',\n    'Product C',\n    'Product D',\n    'Product E',\n    'Product F',\n    'Product G',\n    'Product H',\n    'Product I',\n    'Product J',\n  ];\n  return products[Math.floor(Math.random() * products.length)];\n};\n\nconst generateRandomPrice = (): number => {\n  return Math.floor(Math.random() * 10000) + 1;\n};\n\nconst generateRandomImageUrl = (): string => {\n  return 'https://www.jungle.co.kr/image/ea06cd0346fa8777cb624e3f'; // Placeholder image URL\n};\n\nlet wishlist = Array.from({ length: 30 }, (_, id) => ({\n  id: id + 1,\n  product: {\n    id: id + 1,\n    name: generateRandomName(),\n    price: generateRandomPrice(),\n    imageUrl: generateRandomImageUrl(),\n  },\n}));\nexport const wishlistMockHandlers = [\n  // 위시리스트 상품 추가\n  rest.post(`${BASE_URL}/wishes`, (req, res, ctx) => {\n    const { productId } = req.body as { productId: number };\n    const newWish = {\n      id: wishlist.length + 1,\n      product: {\n        id: productId,\n        name: `Product ${productId}`,\n        price: Math.floor(Math.random() * 1000),\n        imageUrl: `http://example.com/product-${productId}.jpg`,\n      },\n    };\n    wishlist.push(newWish);\n    return res(ctx.status(201), ctx.json({ id: newWish.id, productId }));\n  }),\n\n  // 위시리스트 상품 삭제\n  rest.delete(`${BASE_URL}/wishes/:wishId`, (req, res, ctx) => {\n    const { wishId } = req.params;\n    wishlist = wishlist.filter((wish) => wish.id !== Number(wishId));\n    return res(ctx.status(204));\n  }),\n\n  // 위시리스트 상품 조회 (페이지네이션 적용)\n  rest.get(`${BASE_URL}/wishes`, (req, res, ctx) => {\n    const page = Number(req.url.searchParams.get('page') || '0');\n    const size = Number(req.url.searchParams.get('size') || '10');\n    const sortParam = req.url.searchParams.get('sort') || 'createdDate,desc';\n\n    const startIndex = page * size;\n    const endIndex = startIndex + size;\n\n    // 정렬 로직 구현 (여기서는 간단히 id로 정렬)\n    const sortedWishlist = [...wishlist].sort((a, b) => {\n      const [field, order] = sortParam.split(',');\n      if (field === 'createdDate') {\n        return order === 'desc' ? b.id - a.id : a.id - b.id;\n      }\n      return 0;\n    });\n\n    const paginatedWishes = sortedWishlist.slice(startIndex, endIndex);\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        content: paginatedWishes,\n        pageable: {\n          sort: {\n            sorted: true,\n            unsorted: false,\n            empty: false,\n          },\n          pageNumber: page,\n          pageSize: size,\n          offset: startIndex,\n          unpaged: false,\n          paged: true,\n        },\n        totalPages: Math.ceil(wishlist.length / size),\n        totalElements: wishlist.length,\n        last: endIndex >= wishlist.length,\n        number: page,\n        size: size,\n        numberOfElements: paginatedWishes.length,\n        first: page === 0,\n        empty: paginatedWishes.length === 0,\n      }),\n    );\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/mocks/categories.mock';\nimport { loginMockHandler } from '@/api/mocks/login.mock';\nimport { productDetailMockHandler } from '@/api/mocks/productDetail.mock';\nimport { productOptionsMockHandler } from '@/api/mocks/productOptions.mock';\nimport { productsMockHandler } from '@/api/mocks/products.mock';\nimport { registerMockHandler } from '@/api/mocks/register.mock';\nimport { wishlistMockHandlers } from '@/api/mocks/wishlist.mock';\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...productDetailMockHandler,\n  ...productOptionsMockHandler,\n  ...loginMockHandler,\n  ...registerMockHandler,\n  ...wishlistMockHandlers,\n);\n"],"names":["loginMockHandler","rest","post","concat","async","req","res","ctx","email","json","response","token","status","mockProductDetail","id","name","price","imageUrl","categoryId","productDetailMockHandler","get","productId","params","message","productOptionsMockHandler","options","optionCount","Math","floor","random","Array","from","length","_","index","String","fromCharCode","quantity","generateOptions","Number","registerMockHandler","password","body","BASE_URL","generateRandomName","products","wishlist","product","wishlistMockHandlers","newWish","push","delete","wishId","filter","wish","page","url","searchParams","size","sortParam","startIndex","endIndex","paginatedWishes","sort","a","b","field","order","split","slice","content","pageable","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","totalPages","ceil","totalElements","last","number","numberOfElements","first","worker","setupWorker","categoriesMockHandler","productsMockHandler"],"sourceRoot":""}