{"version":3,"file":"static/js/892.a35b655a.chunk.js","mappings":"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","sources":["api/mocks/login.mock.ts","api/mocks/productDetail.mock.ts","api/mocks/productOptions.mock.ts","api/mocks/register.mock.ts","api/mocks/wishlist.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nimport type { LoginResponse } from '@/types';\n\n// 가짜 사용자 데이터\nconst fakeUsers = [\n  { email: 'test@example.com', password: 'password123' },\n  { email: 'user@example.com', password: 'userpass' },\n];\n\n// 로그인 성공 응답\nconst loginSuccessResponse: LoginResponse = {\n  email: 'test@example.com', // 예시 이메일 추가\n  token: 'fake-jwt-token',\n};\n\n// 로그인 API 모킹\nconst loginHandler = rest.get('/login', (req, res, ctx) => {\n  const authCode = req.url.searchParams.get('code');\n\n  if (authCode) {\n    return res(ctx.status(200), ctx.json(loginSuccessResponse));\n  } else {\n    return res(ctx.status(401), ctx.json({ message: '인증에 실패했습니다.' }));\n  }\n});\n\n// 인증 코드 발급 API 모킹 (필요한 경우)\nconst getAuthCodeHandler = rest.post('/auth/code', (req, res, ctx) => {\n  const { email, password } = req.body as { email: string; password: string };\n\n  const user = fakeUsers.find((u) => u.email === email && u.password === password);\n\n  if (user) {\n    return res(ctx.status(200), ctx.json({ authCode: 'fake-auth-code' }));\n  } else {\n    return res(ctx.status(401), ctx.json({ message: '이메일 또는 비밀번호가 잘못되었습니다.' }));\n  }\n});\n\nexport const loginMockHandler = [loginHandler, getAuthCodeHandler];","import { rest } from 'msw';\n\nimport type { ProductData } from '@/types';\n\nconst mockProductDetail: ProductData = {\n  id: 1,\n  name: 'Sample Product',\n  price: 100,\n  imageUrl:\n    'https://i.namu.wiki/i/lTIwu3NCJk-m5VOdugukoiVGzyZAVauahUc2qnrOX-j8XFCA7PXv95cioeTRqrixnTUYDdfZnapP2Fo-jz3OBl5VYyd5SJpft-ZcMedgg4QmJGEkeol2W-do5U3mL6_vqQYTPAr7QBwp7VTts7kmfiYUgQ_Hosv7gwcBxnFagmo.webp',\n  categoryId: 1,\n};\n\nexport const productDetailMockHandler = [\n  rest.get('/api/products/:productId', (req, res, ctx) => {\n    const { productId } = req.params;\n    const id = parseInt(productId as string, 10);\n\n    // 요청된 productId와 목 데이터의 id를 비교\n    if (mockProductDetail.id === id) {\n      return res(\n        ctx.status(200),\n        ctx.json(mockProductDetail) // 목 데이터를 반환\n      );\n    } else {\n      return res(\n        ctx.status(404),\n        ctx.json({ message: \"Product not found\" }) \n      );\n    }\n  }),\n];\n","import { rest } from 'msw';\n\nimport type { ProductOption } from '../hooks/useGetProductOptions';\n\n\n// 동적으로 옵션을 생성하는 함수\nconst generateOptions = (productId: number): ProductOption[] => {\n  const optionCount = Math.floor(Math.random() * 3) + 1; // 1에서 3개의 옵션 생성\n  return Array.from({ length: optionCount }, (_, index) => ({\n    id: index + 1,\n    name: `Option ${String.fromCharCode(65 + index)}`, // A, B, C...\n    quantity: Math.floor(Math.random() * 50) + 10, // 10에서 59 사이의 수량\n    productId: productId,\n  }));\n};\n\n// MSW 핸들러\nexport const productOptionsMockHandler = [\n  rest.get('/api/products/:productId/options', (req, res, ctx) => {\n    const { productId } = req.params;\n    const id = parseInt(productId as string, 10);\n\n    // 동적으로 옵션 생성\n    const options = generateOptions(id);\n\n    if (options) {\n      return res(\n        ctx.status(200),\n        ctx.json(options)\n      );\n    } else {\n      return res(\n        ctx.status(404),\n        ctx.json({ message: \"Product options not found\" })\n      );\n    }\n  }),\n];\n","import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000';\n\ninterface RegisterRequestBody {\n  email: string;\n  password: string;\n}\n\ninterface RegisterSuccessResponse {\n  email: string;\n  token: string;\n}\n\nexport const registerMockHandler = [\n  rest.post<RegisterRequestBody>(`${BASE_URL}/api/members/register`, (req, res, ctx) => {\n    const { email, password } = req.body;\n\n    // Basic validation (add more robust validation as needed)\n    if (!email || !password) {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    // Simulate successful registration\n    const response: RegisterSuccessResponse = {\n      email,\n      token: 'mocked-registration-token',\n    };\n    return res(ctx.status(201), ctx.json(response));\n  }),\n];\n","import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000/api';\n\n// 모의 데이터\nconst generateRandomName = (): string => {\n  const products = [\n    'Product A',\n    'Product B',\n    'Product C',\n    'Product D',\n    'Product E',\n    'Product F',\n    'Product G',\n    'Product H',\n    'Product I',\n    'Product J',\n  ];\n  return products[Math.floor(Math.random() * products.length)];\n};\n\nconst generateRandomPrice = (): number => {\n  return Math.floor(Math.random() * 10000) + 1;\n};\n\nconst generateRandomImageUrl = (): string => {\n  return 'https://www.jungle.co.kr/image/ea06cd0346fa8777cb624e3f'; // Placeholder image URL\n};\n\nlet wishlist = Array.from({ length: 30 }, (_, id) => ({\n  id: id + 1,\n  product: {\n    id: id + 1,\n    name: generateRandomName(),\n    price: generateRandomPrice(),\n    imageUrl: generateRandomImageUrl(),\n  },\n}));\nexport const wishlistMockHandlers = [\n  // 위시리스트 상품 추가\n  rest.post(`${BASE_URL}/wishes`, (req, res, ctx) => {\n    const { productId } = req.body as { productId: number };\n    const newWish = {\n      id: wishlist.length + 1,\n      product: {\n        id: productId,\n        name: `Product ${productId}`,\n        price: Math.floor(Math.random() * 1000),\n        imageUrl: `http://example.com/product-${productId}.jpg`,\n      },\n    };\n    wishlist.push(newWish);\n    return res(ctx.status(201), ctx.json({ id: newWish.id, productId }));\n  }),\n\n  // 위시리스트 상품 삭제\n  rest.delete(`${BASE_URL}/wishes/:wishId`, (req, res, ctx) => {\n    const { wishId } = req.params;\n    wishlist = wishlist.filter((wish) => wish.id !== Number(wishId));\n    return res(ctx.status(204));\n  }),\n\n  // 위시리스트 상품 조회 (페이지네이션 적용)\n  rest.get(`${BASE_URL}/wishes`, (req, res, ctx) => {\n    const page = Number(req.url.searchParams.get('page') || '0');\n    const size = Number(req.url.searchParams.get('size') || '10');\n    const sortParam = req.url.searchParams.get('sort') || 'createdDate,desc';\n\n    const startIndex = page * size;\n    const endIndex = startIndex + size;\n\n    // 정렬 로직 구현 (여기서는 간단히 id로 정렬)\n    const sortedWishlist = [...wishlist].sort((a, b) => {\n      const [field, order] = sortParam.split(',');\n      if (field === 'createdDate') {\n        return order === 'desc' ? b.id - a.id : a.id - b.id;\n      }\n      return 0;\n    });\n\n    const paginatedWishes = sortedWishlist.slice(startIndex, endIndex);\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        content: paginatedWishes,\n        pageable: {\n          sort: {\n            sorted: true,\n            unsorted: false,\n            empty: false,\n          },\n          pageNumber: page,\n          pageSize: size,\n          offset: startIndex,\n          unpaged: false,\n          paged: true,\n        },\n        totalPages: Math.ceil(wishlist.length / size),\n        totalElements: wishlist.length,\n        last: endIndex >= wishlist.length,\n        number: page,\n        size: size,\n        numberOfElements: paginatedWishes.length,\n        first: page === 0,\n        empty: paginatedWishes.length === 0,\n      }),\n    );\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/mocks/categories.mock';\nimport { loginMockHandler } from '@/api/mocks/login.mock';\nimport { productDetailMockHandler } from '@/api/mocks/productDetail.mock';\nimport { productOptionsMockHandler } from '@/api/mocks/productOptions.mock';\nimport { productsMockHandler } from '@/api/mocks/products.mock';\nimport { registerMockHandler } from '@/api/mocks/register.mock';\nimport { wishlistMockHandlers } from '@/api/mocks/wishlist.mock';\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...productDetailMockHandler,\n  ...productOptionsMockHandler,\n  ...loginMockHandler,\n  ...registerMockHandler,\n  ...wishlistMockHandlers,\n);\n"],"names":["fakeUsers","email","password","loginSuccessResponse","token","loginMockHandler","rest","get","req","res","ctx","url","searchParams","status","json","message","post","body","find","u","authCode","mockProductDetail","id","name","price","imageUrl","categoryId","productDetailMockHandler","productId","params","parseInt","productOptionsMockHandler","options","optionCount","Math","floor","random","Array","from","length","_","index","concat","String","fromCharCode","quantity","generateOptions","registerMockHandler","response","BASE_URL","generateRandomName","products","wishlist","product","wishlistMockHandlers","newWish","push","delete","wishId","filter","wish","Number","page","size","sortParam","startIndex","endIndex","paginatedWishes","sort","a","b","field","order","split","slice","content","pageable","sorted","unsorted","empty","pageNumber","pageSize","offset","unpaged","paged","totalPages","ceil","totalElements","last","number","numberOfElements","first","worker","setupWorker","categoriesMockHandler","productsMockHandler"],"sourceRoot":""}